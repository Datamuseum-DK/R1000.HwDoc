#!/usr/local/bin/python3.8
#
# NB: We strive to use y-x coordinate order to match numpy's convention

''' STEP 210: Locate And-ish, Or-ish and Inverter-ish elements '''

import sys

import numpy as np

import schematics as sch

import templates

from corner import Corner

from debug_snippets import DebugSnippets

from rectangle import Rectangle

PATT_50 = '''
------------------------------------------------------------
------------------------------------------------------------
------#------#################################--------------
------##-----##-----------------------------##-----##---##--
------##-----##-----------------------------##-----##--####-
------##-----##-----------------------------##-----##--####-
------##-----##-----------------------------##-----##---###-
------##-----##------##-------------------#-##-----##----#--
-------------##-##--####------------###-######--------------
####-###-----######-####-----------####-######-----##-------
############-######-####-----------####-####################
-------------###--#-####-----------####-##-###--------------
------##-----###-----##------------#--#--##-##----------#---
-----####----##-----------------------------##-----##--####-
------###----##-----------------------------##-----##--####-
-----###-----##-----------------------------##-----##-----#-
-----###-----##-----------------------------##-----##----##-
-----####----##---------------------#-------##-----##---##--
-------------##-##---##-------------##--######--------------
##----##-----###-##--##------------####-######--------------
###################--##------------####--########--###-#####
-------------######--##------------####---####--------------
------##-----##------##------------#--#--##-##--------------
-----####----##-----------------------------##-----##---##--
-------##----##-----------------------------##-----##--##---
-------##----##-----------------------------##-----##--###--
-----#-##----##-----------------------------##-----##--#-##-
------##-----##-----------------------------##-----##---##--
-------------##-##--####-------##---##--######--------------
-------------###-##---##------####--##--######--------------
###################-###-------####--##--####################
-------------###-##-##--------####--##--######--------------
-------#-----###--#-####------#--#--##---##-##--------------
------##-----##-----------------------------##-----##--####-
-----###-----##-----------------------------##-----##---##--
-----####----##-----------------------------##-----##---#---
-------##----##-----------------------------##-----##--#----
-------#-----##------#---------------#------##-----##--#----
-------------##-##--####------###---##---##-##--------------
--##-###-----###-##---##------####--##---##-##-##-----------
###################---##------####--##---##-################
-------------###-##-#-##------####--##---##-##--------------
-----####----###--#--##-------#-----##---##-##----------##--
-----####----##-----------------------------##-----##--####-
-----####----##-----------------------------##-----##--#-##-
-------##----##-----------------------------##-----##--####-
-----####----##-----------------------------#------##--#-##-
------##-----##----------------#----#-------#------##---##--
-------------#####---##-------###---##--#####---------------
###########-####-##-###-------####--##--######--------------
###--#####---######-####------####--##--###-################
-------------###-##---#-------####--##--##--#---------------
------##-----##-------#-------#--#--##--#####---------------
-----##------##-----------------------------#------##--####-
-----###-----##-----------------------------#------##--####-
-----####----##-----------------------------#------##---###-
-----####----##-----------------------------#------##---##--
------##-----##------###-----------------#--#------##---#---
-------------##-###-###-------###---##--#####---------------
#-######-----###-##-####------#-##--##----####-----#--------
-------------######---##------####--##----#######--####-#-##
-------------######-####------#--#--##--#####---------------
-----####----###-----##----------#--##---##-##-----#----#---
-------##----##-----------------------------#-----####-###--
-------#-----##-----------------------------#-------##-####-
------#------##-----------------------------#-----##---####-
-----#-------##-----------------------------#-----#----####-
-------------##-------#--------##---#-----#-#-------#-------
-------------##-###--#--------###---##---##-#---------------
#-#####-########-##-###-------####--##--######--------------
----##-------######-####------####--##--######------#-----#-
-------------###-##-####------####--##----####--------------
------##-----##------##-------------#-------#-------#-------
-----####----##-----------------------------#-----#-##--##--
-----####----##-----------------------------##------##--##--
-----#-##----##-----------------------------##----#-----##--
-----####----##-----------------------------##----###---##--
-------------##-----####-----------------##-##----###-------
-------------######---##------####--##--###-##--------------
################-##--##-------####--##---############-######
-------------######-##--------####--##-----###-----------#--
-------------###-##-##--------#-##--##--######--------------
-------------##-----------------------------#---------------
-------------##-----------------------------##--------------
-------------##-----------------------------##--------------
-------------##-----------------------------##--------------
-------------##-----------------------------##--------------
-##---##-----##----------####---#---###-----##-----##-------
-##----##----##----------#-----##--#-##-----##----####------
-##----##----##----------####-####---##-----##-----###------
-##----##----##----------####-####---##-----#-------##------
-##--####----##----------####---#--####-----##-----##-------
-------------#####-----------------------##-##--------------
-------------######---------------------######--------------
###################---------------------##-#################
-------------######---------------------######--------------
-------------######---------------------######--------------
-##--###-----##-----------------------------##-----#---###--
-##----##----##-----------------------------##-----##--####-
-##---##-----##-----------------------------#------##--####-
-##--##------##-----------------------------#------##--####-
-##--####----##-----------------------------##-----##--####-
----------#########-####-----------#--#-########------------
---------##-####----####-----------#--#-##--###-#-----------
###########--###----####-----------#-##-##--##--############
---------##-####----#-##-----------####-##--###-#-----------
----------########--###------------####-#########-----------
-------------##-----------------------------#---------------
-------------##-----------------------------##--------------
-------------##-----------------------------##--------------
-------------##-----------------------------##--------------
-------------##-----------------------------##--------------
-------------##-----###---##--#-##-#--#--##-##--------------
-------------##-----##---###--###--####--##-##--------------
-------------##-----###--###--###---##---##-##--------------
-------------##-----####-####-###--####--##-##--------------
-------------##----#####--###-#########-######--------------
--------------###############################---------------
------------------------------------------------------------
------------------------------------------------------------
'''

class Sheet_250a(templates.Template_Sheet):

    HEIGHT = 2.3
    WIDTH = 0.6

    CORNERS = (
        ( "tl", -310, -82, 40),
        ( "tr", -310,  82, 40),
        ( "bl",  310, -82, 40),
        ( "br",  310,  82, 40),
    )

    def study(self, inch, match):
        dbg = DebugSnippets()
        print("STUD", inch, match)
        dbg.add(match.snippet)
        pix = self.inch2pix(inch)

        got = 0
        for corner, dy, dx, box in self.CORNERS:
            cnr = Corner(
                self.img,
                (pix[0] + dy, pix[1] + dx),
                corner,
                debug=dbg,
                box=box,
            )
            print(corner, cnr.pix, cnr)
            if corner == "br" and cnr.pix[1] is None:
                cnr.pix = (cnr.pix[0], self.cnr_tr.pix[1])
                print("fixed", corner, cnr.pix, cnr)

            if None not in cnr.pix:
                sch.add_small_marker(self.img, *cnr.pix)
                got += 1
            cnr.inch = self.pix2inch(cnr.pix)
            setattr(self, "cnr_" + corner, cnr)

        print("CC", self.cnr_tl.inch, self.cnr_br.inch)
        if -9999 not in self.cnr_tl.inch and -9999 not in self.cnr_br.inch:
            proj_tl = sch.inch2proj(self.cnr_tl.inch)
            proj_br = sch.inch2proj(self.cnr_br.inch)
            snippet = sch.snippet(self.proj50, proj_tl, proj_br)
            snippet *= -.25

        if got == 4:
            rect = Rectangle(self.cnr_tl, self.cnr_tr, self.cnr_bl, self.cnr_br)
            rect.align_to_pins(self)

            fn = self.fn_pfx + "rectangle_%03d.png" % match.order

            snippet = sch.snippet(
                self.img,
                (rect.tl.pix[0] - 100, rect.tl.pix[1] - 100),
                (rect.br.pix[0] + 100, rect.br.pix[1] + 100),
            )
            sch.write_image_normalized(snippet, fn)

            chip = self.bom.add_chip(rect, fn)

        tl,br = sch.window(
            pix,
            (
                int((.3 + self.HEIGHT) * sch.APPROX_DPI),
                int((.3 + self.WIDTH) * sch.APPROX_DPI),
            )
        )

        sch.add_small_marker(self.img, *pix)
        snippet = sch.snippet(self.img, tl, br)
        dbg.add(snippet)

        dbg.dump(self.fn_pfx + "study_%03d.png" % match.order)


class Sheet_250b(templates.Template_Sheet):

    CORNERS = (
        ( "tl", -310, -82, 40),
        ( "tr", -310,  82, 40),
        ( "bl",  310, -82, 40),
        ( "br",  310,  82, 40),
    )

    def study(self, inch, match):
        dbg = DebugSnippets()
        print("STUD", inch, match)
        dbg.add(match.snippet)
        pix = self.inch2pix(inch)

        for corner, dy, dx, box in self.CORNERS:
            cnr = sch.Point((pix[0] + dy, pix[1] + dx))
            sch.add_small_marker(self.img, *cnr.pix)
            setattr(self, "cnr_" + corner, cnr)

        rect = Rectangle(self.cnr_tl, self.cnr_tr, self.cnr_bl, self.cnr_br)
        rect.align_to_pins(self)

        fn = self.fn_pfx + "rectangle_%03d.png" % match.order

        snippet = sch.snippet(
            self.img,
            (rect.tl.pix[0] - 100, rect.tl.pix[1] - 100),
            (rect.br.pix[0] + 100, rect.br.pix[1] + 100),
        )
        sch.write_image_normalized(snippet, fn)

        chip = self.bom.add_chip(rect, fn)

        dbg.add(snippet)

        dbg.dump(self.fn_pfx + "study_%03d.png" % match.order)

class Sheet_250(templates.Template_Rectangle_Sheet):

    CORNERS = (
        ( "tl", -310, -82, 40),
        ( "tr", -310,  82, 40),
        ( "bl",  310, -82, 40),
        ( "br",  310,  82, 40),
    )

    SYMBOL = "64KX1"

if __name__ == "__main__":
    if (sys.argv[1], sys.argv[2]) not in (
        ("IOC", "0040"),
        ("IOC", "0041"),
        ("IOC", "0042"),
        ("IOC", "0043"),
        ("IOC", "0044"),
    ):
        exit(0)
    sheet = Sheet_250(
        "64k1",
        sys.argv,
        templates.string_2_template(PATT_50, reflect=False),
        templates.string_2_template(PATT_50, reflect=False),
        0.500,
        0.200,
    )
    sheet.load_raw_image()
    sheet.load_proj50_image()
    sheet.load_components()
    sheet.match() 
    sheet.write_image("proj50", sheet.proj50)
    sheet.write_components()
    sheet.write_interpolators()
    sheet.write_interpolated()
    sheet.write_landmarks()
